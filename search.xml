<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Map实现底层原理</title>
      <link href="/2024/05/11/map-shi-xian-di-ceng-yuan-li/"/>
      <url>/2024/05/11/map-shi-xian-di-ceng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="es6-Map"><a href="#es6-Map" class="headerlink" title="es6 Map()"></a>es6 Map()</h2><h4 id="Map-常见方法"><a href="#Map-常见方法" class="headerlink" title="Map() 常见方法"></a>Map() 常见方法</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map-底层原理"><a href="#Map-底层原理" class="headerlink" title="Map() 底层原理"></a>Map() 底层原理</h4><ul><li>哈希概念</li><li>桶的概念</li><li>链表的概念</li></ul><h4 id="Map-自我实现"><a href="#Map-自我实现" class="headerlink" title="Map()自我实现"></a>Map()自我实现</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bLength <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// 设置tong的长度</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">MyMap</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">initStore</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>storeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bLength<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bLength<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeList<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>          next<span class="token operator">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">MyMap</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hash</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> key <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">MyMap</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">.</span>index <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      queue<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">{</span>        key<span class="token operator">:</span> key<span class="token punctuation">,</span>        value<span class="token operator">:</span> val<span class="token punctuation">,</span>        next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">MyMap</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>next      <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> queue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">else</span> queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">MyMap</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">delete</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          queue<span class="token punctuation">.</span>next <span class="token operator">=</span> queue<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"delete!!!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token string">"不存在"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">MyMap</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> size<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">MyMap</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">has</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>next<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"has存在"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token string">"不存在"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"52"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/15/hello-world/"/>
      <url>/2023/06/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>interview-2023</title>
      <link href="/2023/05/23/interview-2023/"/>
      <url>/2023/05/23/interview-2023/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关键词： <code>2023前端面试</code> <code>web前端面试</code><br><code>该文章所有问题皆是2023-05-04开始，面试前端岗位过程中，被问到的问题，在此记录下，并持续更新(还没有找到工作的情况下...)</code></p><h2 id="问题：vue同步父子组件和异步父子组件的生命周期顺序"><a href="#问题：vue同步父子组件和异步父子组件的生命周期顺序" class="headerlink" title="问题：vue同步父子组件和异步父子组件的生命周期顺序"></a>问题：vue同步父子组件和异步父子组件的生命周期顺序</h2><p><strong>同步</strong><br>父组件的beforeCreate. created. beforeMount –&gt; 所有子组件的beforeCreate. created. beforeMount –&gt; 所有子组件的mounted –&gt; 父组件的mounted</p><p><strong>异步</strong><br>父组件的beforeCreate. created. beforeMount. mounted –&gt; 子组件的beforeCreate. created. beforeMount. mounted</p><h2 id="问题：移动端是如何做适配的"><a href="#问题：移动端是如何做适配的" class="headerlink" title="问题：移动端是如何做适配的"></a>问题：移动端是如何做适配的</h2><ol><li>rem(根据根节点定义font-size) + viewport缩放【淘宝方案】</li><li>第三方插件+配置</li><li>flex弹性布局</li><li>媒体查询 css3 的 @madia queries<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*当屏幕尺寸小于600px时，应用下面的CSS样式*/</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token comment">/*你的css代码*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题：call怎么实现的"><a href="#问题：call怎么实现的" class="headerlink" title="问题：call怎么实现的"></a>问题：call怎么实现的</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">Function<span class="token punctuation">.</span>prototyp5<span class="token punctuation">.</span><span class="token function-variable function">my_call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context <span class="token operator">||</span> context <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context <span class="token operator">=</span> window       <span class="token punctuation">}</span>       <span class="token keyword">const</span> sy <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       cx<span class="token punctuation">[</span>sy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>       <span class="token keyword">return</span> cx<span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题：使用promise实现并发请求限制N个"><a href="#问题：使用promise实现并发请求限制N个" class="headerlink" title="问题：使用promise实现并发请求限制N个"></a>问题：使用promise实现并发请求限制N个</h2>（每次执行三个，一个执行完再补上一个，一直保持三个promise在执行）<br><img src="/2023/05/23/interview-2023/img.png" alt="img.png"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"https://www.kkkk1000.com/images/getImgData/getImgDatadat1.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"https://www.kkkk1000.com/images/getImgData/gray.gif"</span><span class="token punctuation">,</span>    <span class="token string">"https://www.kkkk1000.com/images/getImgData/Particl5.gif"</span><span class="token punctuation">,</span>    <span class="token string">"https://www.kkkk1000.com/images/getImgData/arithmeti3.png"</span><span class="token punctuation">,</span>    <span class="token string">"https://www.kkkk1000.com/images/getImgData/arithmetic2.gif"</span><span class="token punctuation">,</span>    <span class="token string">"https://www.kkkk1000.com/images/getImgData/getImgDataError.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"https://www.kkkk1000.com/images/getImgData/arithmeti3.gif"</span><span class="token punctuation">,</span>    <span class="token string">"https://www.kkkk1000.com/images/wxQrCode2.png"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject<span class="token punctuation">;</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">limitLoad</span><span class="token punctuation">(</span><span class="token parameter">urls<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> queue <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> _p <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> res<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promis5<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> _p <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_p<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> _p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> res<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Promis5<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">limitLoad</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> loadImg<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> consol5<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="问题：虚拟列表描述"><a href="#问题：虚拟列表描述" class="headerlink" title="问题：虚拟列表描述"></a>问题：虚拟列表描述</h2><p> 定义：按需显示的一种实现，只对可见区域进行渲染。 对非可见区域中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能</p><h4 id="定高"><a href="#定高" class="headerlink" title="定高"></a>定高</h4><h5 id="关键点：可视区域高度-item高度-list高度-当前滚动位置-偏移量（startOffset）-可显示item个数"><a href="#关键点：可视区域高度-item高度-list高度-当前滚动位置-偏移量（startOffset）-可显示item个数" class="headerlink" title="关键点：可视区域高度. item高度. list高度. 当前滚动位置. 偏移量（startOffset）. 可显示item个数"></a>关键点：<code>可视区域高度. item高度. list高度. 当前滚动位置. 偏移量（startOffset）. 可显示item个数</code></h5><ul><li>计算当前可见区域起始数据的 startIndex<ul><li>Math.floor(scrollTop / itemSize)</li></ul></li><li>计算当前可见区域结束数据的 endIndex<ul><li>endIndex = startIndex + visibleCount</li></ul></li><li>计算当前可见区域的数据，并渲染到页面中<ul><li>Math.ceil(screenHeight / itemSize)</li></ul></li><li>计算 startIndex 对应的数据在整个列表中的偏移位置 startOffset，并设置到列表上<ul><li>startOffset = scrollTop - (scrollTop % itemSize);<br><img src="/2023/05/23/interview-2023/img1.png" alt="img1.png"></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span><span class="token string">'VirtualList'</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//所有列表数据</span>    listData<span class="token operator">:</span><span class="token punctuation">{</span>      type<span class="token operator">:</span>Array<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//每项高度</span>    itemSize<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span><span class="token number">200</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//列表总高度</span>    <span class="token function">listHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listDat1<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//可显示的列表项数</span>    <span class="token function">visibleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>screenHeight <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//偏移量对应的style</span>    <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate3d(0,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>startOffset<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px,0)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//获取真实显示列表数据</span>    <span class="token function">visibleData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listDat1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>listDat1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>screenHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>visibleCount<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment">//可视区域高度</span>      screenHeight<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment">//偏移量</span>      startOffset<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment">//起始索引</span>      start<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment">//结束索引</span>      end<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">scrollEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//当前滚动位置</span>      <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>list<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>      <span class="token comment">//此时的开始索引</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>scrollTop <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//此时的结束索引</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>visibleCount<span class="token punctuation">;</span>      <span class="token comment">//此时的偏移量</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>startOffset <span class="token operator">=</span> scrollTop <span class="token operator">-</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题：vue中mixins和组件中的优先级"><a href="#问题：vue中mixins和组件中的优先级" class="headerlink" title="问题：vue中mixins和组件中的优先级"></a>问题：vue中mixins和组件中的优先级</h2><p>如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行mixin的钩子，再执行组件的钩子<br>相当于组件的拓展，和组件内其他方法变量一样使用</p><pre class="line-numbers language-vu5.js" data-language="vu5.js"><code class="language-vu5.js">import mixin from './mixin.js'  export default {  name: 'list',  mixins: [‘minxin’]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><p>同个mixin被多个组件调用 </p><ol><li>每个组件引入后，各个组件间变量是独立的，不会项目污染</li></ol></li><li><p>相同方法，属性 </p><ol><li>mixin和组件中存在相同方法时，组件方法优先级大于mixin</li></ol></li><li><p>执行顺序</p><ol><li>mixin事件执行顺序要优先于组件的</li></ol><p><strong>从外到内，再从内到外，mixins先于组件</strong></p></li></ol><h4 id="从源码上看"><a href="#从源码上看" class="headerlink" title="从源码上看"></a>从源码上看</h4><ul><li>优先递归处理 mixins</li><li>先遍历合并parent中key再调用mergeField合并，保存</li><li>再遍历child,合并parent中没有的key，再调用mergeField合并，保存</li><li>通过mergeOption合并</li></ul><h2 id="问题：-v-model-和sync的区别"><a href="#问题：-v-model-和sync的区别" class="headerlink" title="问题： v-model 和sync的区别"></a>问题： v-model 和sync的区别</h2><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>   格式不同<br>   一个组件身上只能有一个v-model 但是.sync修饰符能有多个</p><ol><li>v-model –&gt; <code>&lt;com1 :value="num" @input="(val)=&gt;this.num=val"&gt;&lt;/com1&gt;</code></li><li>.sync–&gt;<code>&lt;com1 :a="num" @update:a="val=&gt;num=val" :b="num2" @update:b="val=&gt;num2=val" /&gt;</code></li></ol><h4 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h4><p>   都是语法糖，都可以实现父子组建中的数据的双向通信</p><h2 id="问题：-BFC"><a href="#问题：-BFC" class="headerlink" title="问题： BFC"></a>问题： BFC</h2><p>   是css的一个布局的改变，独立的区域</p><h4 id="触发条件："><a href="#触发条件：" class="headerlink" title="触发条件："></a>触发条件：</h4><ol><li>根元素</li><li>float不为none</li><li>overflow不为visible</li><li>display的值为inline-block. inline-flex. flex. flow-root. table-caption. table-cell。</li><li>position的值为absolute或者fixed</li></ol><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ol><li>开启bfc不会被浮动元素覆盖</li><li>开启bfc的元素子元素和父元素不会重叠</li><li>开启bfc的元素高度不会塌陷</li><li>取消margin的塌陷</li></ol><h2 id="问题：typeof原理是什么"><a href="#问题：typeof原理是什么" class="headerlink" title="问题：typeof原理是什么"></a>问题：typeof原理是什么</h2><p>   原理： 通过检查操作数的内部的[[class]]属性来确定其数据类型</p><h2 id="问题：string作为基本类型，怎么会拥有-length-substring等属性-方法呢？"><a href="#问题：string作为基本类型，怎么会拥有-length-substring等属性-方法呢？" class="headerlink" title="问题：string作为基本类型，怎么会拥有 length. substring等属性. 方法呢？"></a>问题：string作为基本类型，怎么会拥有 length. substring等属性. 方法呢？</h2><p>   原因：基本类型在调用方法是，JS引擎会先对原始类型数据进行包装 – 基本包装类型。</p><h4 id="什么是基本包装类型（JS包装类）"><a href="#什么是基本包装类型（JS包装类）" class="headerlink" title="什么是基本包装类型（JS包装类）"></a>什么是基本包装类型（JS包装类）</h4><p>   <strong>步骤：</strong></p><ol><li>创建基本类型的一个实例；</li><li>在实例上调用指定的方法；</li><li>销毁这个实例；<pre class="line-numbers language-none"><code class="language-none">var str = '我是string基本类型的值'var new_str = new String("我是string基本类型的值");  // 包装处理var my_str = new_str.substring(5,8);new_str = null;   // 方法调用之后销毁实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="问题：JSON-parse-有什么弊端"><a href="#问题：JSON-parse-有什么弊端" class="headerlink" title="问题：JSON.parse()有什么弊端"></a>问题：JSON.parse()有什么弊端</h2><ul><li>如果obj里面存在时间对象,JSON.parse(JSON.stringify(obj))之后，时间对象变成了字符串。</li><li>如果obj里有RegExp. Error对象，则序列化的结果将只得到空对象。</li><li>如果obj里有函数，undefined，则序列化的结果会把函数， undefined丢失。</li><li>如果obj里有NaN. Infinity和-Infinity，则序列化的结果会变成null。</li><li>JSON.stringify()只能序列化对象的可枚举的自有属性。如果obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor。</li><li>如果对象中存在循环引用的情况也无法正确实现深拷贝。 </li></ul><h2 id="问题：deepclone叙述"><a href="#问题：deepclone叙述" class="headerlink" title="问题：deepclone叙述"></a>问题：deepclone叙述</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj    <span class="token comment">//避免循环引用</span>    <span class="token keyword">const</span> objFrommap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>objFrommap<span class="token punctuation">)</span> <span class="token keyword">return</span> objFrommap    <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token comment">// map</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span>k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>            <span class="token keyword">const</span> k1 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>            target<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> v1<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//Set</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>            target<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//object</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> element <span class="token operator">=</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> map<span class="token punctuation">)</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token punctuation">}</span>    <span class="token comment">//array</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题：解释闭包"><a href="#问题：解释闭包" class="headerlink" title="问题：解释闭包"></a>问题：解释闭包</h2><ul><li>（解释问题是什么？）闭包是：能够访问其他函数内部变量的函数。</li><li>（解释这个技术的应用点，应用场景）闭包一般会在：封装模块的时候，通过函数自执行函数的方式进行实现；或者在模仿块级作用域的时候实现；如：我们常用的库jQuery本身就是一个大的闭包。</li><li>（说一下优缺点）闭包的优点是：<ul><li> 能够在离开函数之后继续访问该函数的变量，变量一直保存在内存中。</li><li> 闭包中的变量是私有的，只有闭包函数才有权限访问它。不会被外面的变量和方法给污染。</li></ul></li><li>闭包的缺点是：<ul><li> 会增加对内存的使用量，影响性能。</li><li> 不正确的使用闭包会造成内存泄漏。</li></ul></li></ul><h2 id="问题：数组有多少个遍历方法，性能比较"><a href="#问题：数组有多少个遍历方法，性能比较" class="headerlink" title="问题：数组有多少个遍历方法，性能比较"></a>问题：数组有多少个遍历方法，性能比较</h2><ul><li>   for : 频率最高，性能中等 但仍有优化空间</li><li>   优化的for : 提取变量放在第一个参数里</li><li>   forEach : 频率较高，性能比for弱</li><li>   for in : 效率最低 性能最差</li><li>   map ：代码优雅，但效率低，比forEach还差</li><li>   forof : 性能比forin好，比for循环差</li><li>   while ： 效率较好</li></ul><h2 id="问题：map-foreach"><a href="#问题：map-foreach" class="headerlink" title="问题：map foreach"></a>问题：map foreach</h2><h4 id="相同点：-1"><a href="#相同点：-1" class="headerlink" title="相同点："></a>相同点：</h4><p>   map\foreach: </p><ol><li>循环遍历每一项，</li><li>每次遍历都有三个参数， </li><li>匿名函数中this都是指window,  </li><li>都可以在cb中改变原数组</li></ol><h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><p>map : </p><ol><li>有返回值，可以return出一个length和原数组一样的数组；</li><li>会分配内存空间存储新数组并返回</li></ol><p>foreach: </p><ol><li>没有返回值，是undefined； </li><li>return不会终端遍历，除了异常不能终止 3. 不会分配空间</li></ol><h2 id="问题：forof-forin"><a href="#问题：forof-forin" class="headerlink" title="问题：forof forin"></a>问题：forof forin</h2><ol><li>for in 用它可以遍历数组,对象,集合。遍历数组遍历的值是数组index索引，遍历对象和集合时遍历的是key值。<ol><li>遍历顺序有可能不是按照实际数组的内部顺序</li><li>会遍历数组所有的可枚举属性，包括原型。最好不要遍历数组</li></ol></li></ol><ol start="2"><li>for of 是es6 新加加入的语法,适用于遍历数组，字符串，map/set等拥有iterator迭代器的的集合。<ol><li>不能直接遍历对象，会报错。因为Object对象中没有内置的迭代器iterator</li></ol></li></ol><h2 id="问题：浅拷贝，深拷贝分别解释并说出其多种实现方式"><a href="#问题：浅拷贝，深拷贝分别解释并说出其多种实现方式" class="headerlink" title="问题：浅拷贝，深拷贝分别解释并说出其多种实现方式"></a>问题：浅拷贝，深拷贝分别解释并说出其多种实现方式</h2><ol><li>理解深浅拷贝<ol><li>数据分为：基本数据类型（直接存储在栈内存中）. 引用数据类型（存储的对象指针放在栈中，真正数据在堆内存中）</li></ol></li><li>理解栈和堆<ol><li>通过栈里定义一哥地址值，通过地址值去找堆里面定义的某一个值</li><li>区别：堆在栈里存了一个地址值；栈存储的永远是一个基础数据类型的数据</li></ol></li><li>理解深浅拷贝<ol><li>浅：创建一个对象<br>ⅰ. 如果是基本类型，拷贝的就是基本类型的值<br>ⅱ. 如果是引用类型，拷贝的就是内存地址，指向同一个堆内存，改变拷贝的值会影响原来的对象</li><li>深：创建一个新对象<br>ⅰ. 如果是基本类型，拷贝的就是基本类型的值<br>ⅱ. 如果是引用类型，从堆内存里开辟出一个新的区域存放该引用类型指向的堆内存的值，修改新对象的值不会影响原对象</li></ol></li><li>浅拷贝实现<ol><li>展开运算符：…</li><li>Object.assign() , ps: 当obj只有一层的时候是深拷贝</li><li>Array.prototyp5.concat(): 用原数组去合并一个空数组，返回合并后的数组。【不修改原数组】</li><li>slice() 不修改原数组</li><li>深拷贝实现<ol><li>JSON.parse（JSON.stringify():  用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象<ul><li>不能处理函数和正则得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为null）</li></ul></li><li>手写deepclone<ul><li>原理：遍历对象. 数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝。</li></ul></li><li>jQuery.extend()<pre class="line-numbers language-none"><code class="language-none">const obj1 = {  a: 1,  b: { f: { g: 1 } },  c: [1, 2, 3]};const obj2 = jQuery.extend(true, {}, obj1);consol5.log(obj1.2.f === obj2.2.f); // false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><h2 id="问题：浏览器上输入url的过程"><a href="#问题：浏览器上输入url的过程" class="headerlink" title="问题：浏览器上输入url的过程"></a>问题：浏览器上输入url的过程</h2><ol><li>DNS查询<ol><li>浏览器缓存–&gt;系统缓存–&gt;查找本地host文件–&gt;本地DNS服务器缓存 –&gt;根域名服务器–&gt;顶级域名服务器–&gt;权威域名服务器</li></ol></li><li>TCP连接<ol><li>三次握手（为撒三次：第一次是请求打开服务端，第二次是服务端告诉客户端已开启，第三次客户端接收到已开启的状态码，开始传送）</li></ol></li><li>发送HTTP请求<ol><li>单向请求过程</li></ol></li><li>服务器处理HTTP请求并返回HTTP报文<ol><li>返回网络响应</li></ol></li><li>HTTP连接断开<ol><li>四次挥手（为撒四次：为了保证数据被全部完成传输后再关闭，双方都接收或传递完再关闭）</li></ol></li><li>浏览器解析并render页面<ol><li>渲染步骤<br>ⅰ. 解析dom–&gt;解析css–&gt;布局–&gt;整合render tree–&gt;重绘重排–&gt;绘制–&gt;渲染</li></ol></li></ol><h2 id="问题：async-await返回一个什么"><a href="#问题：async-await返回一个什么" class="headerlink" title="问题：async await返回一个什么"></a>问题：async await返回一个什么</h2><p>   promise函数</p><h2 id="问题：Object-prototyp5-toString-call-中toString原理"><a href="#问题：Object-prototyp5-toString-call-中toString原理" class="headerlink" title="问题：Object.prototyp5.toString.call()中toString原理"></a>问题：Object.prototyp5.toString.call()中toString原理</h2><ol><li>为什么需要call<ol><li>由于Object.prototyp5.toString()本身允许被修改，像Array. Boolean. Number的toString就被重写过，所以需要调用Object.prototyp5.toString.call(arg)来判断arg的类型，call将arg的上下文指向Object，所以arg执行了Object的toString方法。</li></ol></li><li>为什么需要Object.prototype?<ol><li>Object对象本身就有一个toString()方法，返回的是当前对象的字符串形式，原型上的toString()返回的才是我们真正需要的包含对象数据类型的字符串。</li></ol></li></ol><h2 id="问题：怎么实现一个map"><a href="#问题：怎么实现一个map" class="headerlink" title="问题：怎么实现一个map"></a>问题：怎么实现一个map</h2><p>内部创建一个新对象，然后对其进行遍历，返回一个新的数组</p><h2 id="问题：forEach为什么是并发执行"><a href="#问题：forEach为什么是并发执行" class="headerlink" title="问题：forEach为什么是并发执行"></a>问题：forEach为什么是并发执行</h2><p>   foreach内部实现使用的是<code>**while循环**</code>，当判断当前的索引小于length，会一直执行下去不会等待异步执行完成<br>   forEach 不会按顺序执行 而是并发执行异步任务<br>   for of 和 普通的for循环却能顺序执行异步任务</p><h2 id="问题：-跨域解决方案"><a href="#问题：-跨域解决方案" class="headerlink" title="问题： 跨域解决方案"></a>问题： 跨域解决方案</h2><ol><li>理解跨域<ol><li>由浏览器的同源策略造成的，是浏览器对js实施的安全限制</li><li>同源：域名. 协议. 端口 相同</li><li>同源策略限制以下行为：Cookie,store indexDB无法读取；dom和js无法获取；Ajax请求发不出去</li></ol></li><li>解决方案<ol><li>JSONP：仅支持get请求</li><li>CORS:  只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求，则前后端都需要设置。</li><li>nginx配置解决iconfont跨域</li></ol></li><li>postMessage跨域：<ol><li>window.postMessage的方式进行使用，并可以监听其发送的消息</li></ol></li><li>node中间件实现跨域代理，原理大致与nginx相同</li><li>websocket协议跨域：全双工通信，同时允许跨域</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-4</title>
      <link href="/2023/04/13/vue-4/"/>
      <url>/2023/04/13/vue-4/</url>
      
        <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h4 id="涉及的前端小知识【遇到就记录一下】"><a href="#涉及的前端小知识【遇到就记录一下】" class="headerlink" title="涉及的前端小知识【遇到就记录一下】"></a>涉及的前端小知识【遇到就记录一下】</h4><p>在上一篇中提到的<code>optimize(ast,options)</code>方法中有一个<code>markStatic</code>标识静态节点的方法，在里面有这样的一些代码：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54c3e7b24a3a4d779512006500a12965~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>这个地方涉及到一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType">nodeType</a>的小知识点，记录一下：<br><strong>Node.nodeType:仅读属性，Node.nodeType表示的是该节点的类型</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e5c4423a4d9472ba0a0d9a0bbf7ec4f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>1：元素节点<br>2：属性节点<br>3：文本节点<br>4：CDATA区段<br>5：实体应用元素<br>6：实体<br>7：表示处理指令<br>8：注释节点<br>9：最外层的Root element,包括所有其他节点<br>11:文档碎片节点<br>12：DTD中声明的符号节点</p><p>10：<code>&lt;!DOCTYPE ...&gt; </code></p><h2 id="全图"><a href="#全图" class="headerlink" title="全图"></a>全图</h2><p>跟着<code>生命周期</code>，<code>源码</code>，<code>运行过程</code>描绘完整个全图，大致就是下图这样（真的好丑，但是我并不想重新画一下）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efe255d97af04d5990ebf367bffc95cf~tplv-k3u1fbpfcp-watermark.image" alt="页面 1.png"></p><h1 id="vue中最最最核心的方法"><a href="#vue中最最最核心的方法" class="headerlink" title="vue中最最最核心的方法"></a>vue中最最最核心的方法</h1><h3 id="Watcher源码解析-方法参数的解释："><a href="#Watcher源码解析-方法参数的解释：" class="headerlink" title="Watcher源码解析:方法参数的解释："></a>Watcher源码解析:方法参数的解释：</h3><p>文件调用路径：(src/core/observer/watcher.js)</p><ul><li>deps[]存放dep的数组</li><li>lazy 标记是否是计算属性watcher</li><li>user标记是否是用户watcher</li><li>getter 渲染函数或表达式</li><li>value计算属性的缓存</li><li>addDep()去重重复dep并记录后调用dep.addSub(this)</li><li>depend()调用所有deps[]中的dep.depend()</li><li>get()主要执行getter()</li><li>update()去重watcher防抖，异步执行run()</li><li>evaluate()缓存计算属性，执行getter</li><li>run()执行get()及侦听器中用户的回调<br><strong>vue文件中使用方式</strong><pre class="line-numbers language-none"><code class="language-none">watch: {  value: function (value) {    // update value    $(this.$el).val(value).trigger('change')  }}computed: {     valuse(val){         return val + 'sd'    } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="render-Watcher"><a href="#render-Watcher" class="headerlink" title="render Watcher"></a>render Watcher</h4></li></ul><p><strong>生命周期中调用（src/core/instance/lifecycle.js[197行]）:render Watcher</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">before</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* isRenderWatcher */</span><span class="token punctuation">)</span><span class="token comment">// 最后一个参数为true，说明此处调用的是一个render watcher</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>class Watcher</strong></p><pre class="line-numbers language-none"><code class="language-none">export default class Watcher {...  constructor (    vm: Component, // vue实例    expOrFn: string | Function, // 表达式或者函数    cb: Function, // 回调函数    options?: ?Object, // 控制选项    isRenderWatcher?: boolean // 是否是render watcher  ){  ...if (options) {  this.deep = !!options.deep   this.user = !!options.user 标识用户代码，为true时，出现异常时会有错误提示  this.lazy = !!options.lazy 用于computed watcher,值为true不会执行run()  this.sync = !!options.sync 用于watch watcher，值为true时，同步执行run(),执行更新  this.before = options.before // 用于触发beforeUpdate钩子} else {  this.deep = this.user = this.lazy = this.sync = false}  ...    this.deps = [] // 执行cleanupDeps后，将newDeps赋值给deps    this.newDeps = [] 用于手机更新后当前组件实例依赖的deps    this.depIds = new Set() 执行cleanupDeps后，将newDepIds赋值给depIds    this.newDepIds = new Set() 防止重复收集依赖  ...  &gt;   这一步的操作就是将`expOrEn`赋值给getter    if (typeof expOrFn === 'function') {      this.getter = expOrFn // expOrFn这个参数指的就是：updateComponent函数    } else {      this.getter = parsePath(expOrFn)        ...    }    ...    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>watcher中的get方法</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 把当前的watcher实例赋值给Dep.target(手机依赖的时候，Dep.target必须有值)</span>      <span class="token keyword">let</span> value      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm      <span class="token keyword">try</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token comment">// 重要，代码发生变化，都是在这一个行执行时发生改变</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将Dep.target的值还原为之前的watcher实例</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这个时候表明watcher的依赖收集完毕</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>this.getter打印结果：实际上执行的就是updateComponent</em></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f21231f24ce42d09a76879d71600f13~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="render-执行vue实例的渲染，返回vue实例的vnode-虚拟DOM"><a href="#render-执行vue实例的渲染，返回vue实例的vnode-虚拟DOM" class="headerlink" title="_render:执行vue实例的渲染，返回vue实例的vnode(虚拟DOM)"></a>_render:执行vue实例的渲染，返回vue实例的vnode(虚拟DOM)</h4><h4 id="update-执行挂载，内部有个patch"><a href="#update-执行挂载，内部有个patch" class="headerlink" title="_update:执行挂载，内部有个patch"></a>_update:执行挂载，内部有个<strong>patch</strong></h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/921ef208491443ba91c22d1518224c54~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>__patch__：src/core/vdom/patch.js—–&gt;著名的diff算法(下一篇文章专门记录)</p><p><strong>watcher中的update方法</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* istanbul ignore else */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 并不会立即执行,也不会加入到异步更新队列</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 立即执行</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 将watcher实例加入到异步更新队列中，执行nextTick 等方法，后续单独加一片文章记录一下异步更新机制。</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>watcher中的run方法</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">run</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 标识watcher是否在激活状态下</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 执行updateComponent,返回永远是undefined,下面代码不再执行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      value <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">||</span>      <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// set new value</span>      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">callback for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span>        <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="watcher-可以分为三种调用方式"><a href="#watcher-可以分为三种调用方式" class="headerlink" title="watcher 可以分为三种调用方式"></a>watcher 可以分为三种调用方式</h2><ol><li>computed watcher： 用于计算属性的监听</li><li>watch watcher： watch监听数据是否变化</li><li>render watcher :vue渲染<h4 id="1-computed-watcher"><a href="#1-computed-watcher" class="headerlink" title="1.computed watcher"></a>1.computed watcher</h4>initComputed()方法的执行顺序：<code>beforeCreate---&gt;initComputed()---&gt;created</code></li></ol><ul><li> …</li><li> callHook(vm, ‘beforeCreate’)</li><li> …</li><li>initState(vm)[src/core/instance/init.js(57)]<ul><li>if (opts.computed) initComputed(vm, opts.computed)<ul><li>initComputed[src/core/instance/state.js(170)]</li></ul></li></ul></li><li>….</li><li>callHook(vm, ‘created’)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> computedWatcherOptions <span class="token operator">=</span> <span class="token punctuation">{</span> lazy<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">initComputed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span>    <span class="token comment">// 判断用户写法：</span>        <span class="token comment">// value(){return 1} </span>        <span class="token comment">// value:{get(){return 1}}</span>    <span class="token keyword">const</span> getter <span class="token operator">=</span> <span class="token keyword">typeof</span> userDef <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> userDef <span class="token operator">:</span> userDef<span class="token punctuation">.</span>get<span class="token operator">...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSSR<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// create internal watcher for the computed property.</span>      watchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>        vm<span class="token punctuation">,</span>        getter <span class="token operator">||</span> noop<span class="token punctuation">,</span>        noop<span class="token punctuation">,</span>        computedWatcherOptions <span class="token comment">// {lazy:true} 不会立即执行</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">defineComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span> <span class="token comment">// 定义计算属性</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-watch-watcher"><a href="#2-watch-watcher" class="headerlink" title="2.watch watcher"></a>2.watch watcher</h4><p>initWatch()方法的执行顺序：<code>beforeCreate---&gt;initWatch()[src/core/instance/state.js)(293)]---&gt;created</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initWatch</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token operator">:</span> Component<span class="token punctuation">,</span> watch<span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// handler 为每个key值对应的方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 循环内部每一个key执行creatWatcher</span>        <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">createWatcher</span> <span class="token punctuation">(</span>      <span class="token parameter">vm<span class="token operator">:</span> Component<span class="token punctuation">,</span>      expOrFn<span class="token operator">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>      handler<span class="token operator">:</span> any<span class="token punctuation">,</span>      options<span class="token operator">?</span><span class="token operator">:</span> Object</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        options <span class="token operator">=</span> handler        handler <span class="token operator">=</span> handler<span class="token punctuation">.</span>handler      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token comment">// 内部执行new Watcher 创建实例(src/core/instance/state.js[359])</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-render-watcher"><a href="#3-render-watcher" class="headerlink" title="3.render watcher"></a>3.render watcher</h4><p><a href="https://juejin.cn/post/7177646568500101178#heading-6">render watcher</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>掘金同步地址：<a href="https://juejin.cn/post/7177646568500101178">https://juejin.cn/post/7177646568500101178</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue-2.6.14 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-3</title>
      <link href="/2023/04/13/vue-3/"/>
      <url>/2023/04/13/vue-3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写完两篇文章后，发现确实了解到了许多以前迷惑的地方，比如<code>watch 怎么确定写法形式的，Dep是怎么收集的</code>等等,平常面试经历的还是少，趁着这次多发现一些！！</p><p>这篇文章主要记一下生命周期下半部分的执行细节：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3967efa520b7448bbceceb3879b860c0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h4 id="涉及的前端小知识【遇到就记录一下】"><a href="#涉及的前端小知识【遇到就记录一下】" class="headerlink" title="涉及的前端小知识【遇到就记录一下】"></a>涉及的前端小知识【遇到就记录一下】</h4><p>Object.create(null)<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/718f121edc2943388f922ac4bc09bfd0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h5 id="为什么vue中使用Object-create"><a href="#为什么vue中使用Object-create" class="headerlink" title="为什么vue中使用Object.create()"></a>为什么vue中使用Object.create()</h5><pre><code> 主要就是为了防止Object构造函数的原型被修改时对详见的对象产生影响 因为使用Object.create(null)是干净的，是没有原型的</code></pre><h6 id="Object-getPrototypeOf-object"><a href="#Object-getPrototypeOf-object" class="headerlink" title="Object.getPrototypeOf(object)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf">Object.getPrototypeOf(object)</a></h6><p>概念：返回指定对象的原型（内部[[prototype]]属性的值）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f858e822208c431aad549a26f105231a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h5 id="创建对象的方式及区别"><a href="#创建对象的方式及区别" class="headerlink" title="创建对象的方式及区别"></a>创建对象的方式及区别</h5><table><thead><tr><th>const obj = {}</th><th>打印结果</th></tr></thead><tbody><tr><td>const obj = {}</td><td>创建</td></tr><tr><td>console.log(‘打印obj’, obj)</td><td><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7ff0867e9694323b358d838f44590ac~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></td></tr><tr><td>console.log(‘打印一下obj属性’, Object.getPrototypeOf(obj))</td><td><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c31f1e260215429193910700511e2cdf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></td></tr><tr><td>console.log(Object.getPrototypeOf(obj) === Object.prototype)</td><td>true</td></tr></tbody></table><hr><table><thead><tr><th>const obj = Object.create(null)</th><th>打印结果</th></tr></thead><tbody><tr><td>const obj = Object.create(null)</td><td>创建</td></tr><tr><td>console.log(‘打印obj’, obj)</td><td><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c83539e3d0e9484d9776f1e0e9f45abc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></td></tr><tr><td>console.log(‘打印一下obj属性’, Object.getPrototypeOf(obj))</td><td><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99b5b317e89a4500821442d0777cf80c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></td></tr><tr><td>console.log(Object.getPrototypeOf(obj) === Object.prototype)</td><td>false</td></tr><tr><td>const.log(obj.<strong>proto</strong>)</td><td>undefined</td></tr></tbody></table><p><strong>总结</strong></p><p>从上表格得知，两种创建对象的方式，他们的原型对象是不一样的。</p><p>Object.create(null)方法创建出来的对象是干净的</p><p>若：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80312d7d4c3044cab6d2ce5ea54d5abe~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="继续生命周期"><a href="#继续生命周期" class="headerlink" title="继续生命周期"></a>继续生命周期</h2><blockquote><p>上一篇文章，自己勾勒了一个created前的一个执行过程及一部分的相关的主要的方法函数</p></blockquote><p>这一部分继续画图：（潦草图，见谅）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50571f40f1294c56a4e3a2352655e5a5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="在beforeMount、mounted过程中有些重要的过程，单独提出来写上一写："><a href="#在beforeMount、mounted过程中有些重要的过程，单独提出来写上一写：" class="headerlink" title="在beforeMount、mounted过程中有些重要的过程，单独提出来写上一写："></a>在beforeMount、mounted过程中有些重要的过程，单独提出来写上一写：</h2><h3 id="getOuterHTML-src-platforms-web-entry-runtime-with-compiler-js"><a href="#getOuterHTML-src-platforms-web-entry-runtime-with-compiler-js" class="headerlink" title="getOuterHTML(src/platforms/web/entry-runtime-with-compiler.js)"></a>getOuterHTML(src/platforms/web/entry-runtime-with-compiler.js)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$mount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  <span class="token parameter">el<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> template <span class="token operator">=</span> options<span class="token punctuation">.</span>template    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      template <span class="token operator">=</span> <span class="token function">getOuterHTML</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token function">mount</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getOuterHTML</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token operator">:</span> Element</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> el<span class="token punctuation">.</span>outerHTML  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> container<span class="token punctuation">.</span>innerHTML  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个位置有一个基础知识点：outerHTML，相对应的有一个innerHTML,现在记录一下两者的区别</p></blockquote><p><strong>innerHtml</strong><br>从对象的起始位置到终止位置的全部内容，<em>不包括Html标签</em></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a010f95f606f4ef1a040e8d0180f449d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>outerHtml</strong><br>从对象的起始位置到终止位置的全部内容，<em>包括Html标签</em></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11f5fe2527304d5c89bb02627e75b693~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="compileToFunctions-src-compiler-index-js"><a href="#compileToFunctions-src-compiler-index-js" class="headerlink" title="compileToFunctions(src/compiler/index.js)"></a>compileToFunctions(src/compiler/index.js)</h3><blockquote><p>主要是做模板编译的操作(模板代码)</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  {{ message }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--  这一段静态节点--&gt;</span>  {{n}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>()=&gt;{this.n++}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>parse:会用正则等方式解析template模板中的指令、class、style等数据，形成AST</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ddf07f91f6d4d598f4a5f0af22561dd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>optimize:标记static静态节点（markStatic()，markStaticRoots()）,这里是VUE编译过程得一个优化，在diff算法中，直接跳过静态节点，减少比较的过程，优化了patch的性能</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22ea653d1f6b4cc7b049b727d1f0f68f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>generate：是将AST树转化成<code>render function</code>字符串的过程，得到结果是render字符串以及statucRenderFns字符串【此方法中存在一个genElement方法，内部分别去处理vue中指令：v-for…】</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0675b6918829405a80aa410961096c1c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>掘金同步地址：<a href="https://juejin.cn/post/7176577096813133879">https://juejin.cn/post/7176577096813133879</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue-2.6.14 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts-type-challenges</title>
      <link href="/2023/03/10/ts-type-challenges/"/>
      <url>/2023/03/10/ts-type-challenges/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>因为对ts的用法还仅限于any 及简单的inference中，前几天偶然发现了这样一个神奇的网站<a href="https://github.com/type-challenges">type-challenges</a><br>这个网站可以完整的学习一下ts的一些用法及一些类型：比如PICK,omit,infer 等的一些用法。接下来记录一下</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>打开<strong>VSCODE</strong>，点击插件安装<code>type-challenges</code>,然后重启<strong>VSCODE</strong>，左侧操作栏中可以看到这样一个内容<br><img src="/ts-type-challenges/img.png" alt="img.png">，点击可以看到有个目录<br><img src="/ts-type-challenges/img_1.png" alt="img_1.png">。</p><p>我是按照困难程度来进行练习的。</p><p><img src="/ts-type-challenges/img_2.png" alt="img_2.png"></p><h2 id="warm"><a href="#warm" class="headerlink" title="warm"></a>warm</h2><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">// ============= Test Cases =============import type { Equal, Expect, NotAny } from './test-utils'type cases = [Expect&lt;NotAny&lt;HelloWorld&gt;&gt;,Expect&lt;Equal&lt;HelloWorld, string&gt;&gt;,]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">// ============= Your Code Here =============type HelloWorld = string // expected to be a string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="简单篇"><a href="#简单篇" class="headerlink" title="简单篇"></a>简单篇</h2><h3 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">// ============= Test Cases =============import type { Equal, Expect } from './test-utils'type cases = [  Expect&lt;Equal&lt;Expected1, MyPick&lt;Todo, 'title'&gt;&gt;&gt;,  Expect&lt;Equal&lt;Expected2, MyPick&lt;Todo, 'title' | 'completed'&gt;&gt;&gt;,  // @ts-expect-error  MyPick&lt;Todo, 'title' | 'completed' | 'invalid'&gt;,]interface Todo {  title: string  description: string  completed: boolean}interface Expected1 {  title: string}interface Expected2 {  title: string  completed: boolean}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pick-答案"><a href="#Pick-答案" class="headerlink" title="Pick-答案"></a>Pick-答案</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">// ============= Your Code Here =============type MyPick&lt;T, K extends keyof T&gt; = {  [key in K]:T[key]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>extends: 继承<br>keyof:<br>[k in K]: 可以理解为<code>for...in</code>,表示从K中去遍历每个类型。比如：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Expected1 {  title: string}type Ka = {[key in Expected1]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typeScript </tag>
            
            <tag> type-challenges </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我</title>
      <link href="/2023/03/09/myself/"/>
      <url>/2023/03/09/myself/</url>
      
        <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><ul><li>姓名： 都欣</li><li>曾用名： 都雅宁</li><li>电话： 136-8258-4579 / 188-2090-8017</li><li>生辰： 1995-02-03</li><li>专业： 全日制本科软件工程</li></ul><h2 id="我的技能"><a href="#我的技能" class="headerlink" title="我的技能"></a>我的技能</h2><ul><li>熟悉 HTML(5) / CSS(3). JavaScript语法，能够快速搭建前端界面，熟悉ES5. ES6+语法新特性</li><li>熟练使用Vue2. 3全家桶技术，并对源码原理有一定研究</li><li>熟悉 React 开发框架及jsx 语法，能够搭配hooks进行项目开发</li><li>熟悉多端小程序开发及 uniapp 框架,taro 框架并有一定的开发经验</li><li>熟悉Webpack. Vite构建打包工具，熟悉Git版本控制工具，对前端工程化和性能优化有一定了解和实践。</li><li>熟悉浏览器基本原理，熟悉常见的网络协议，如HTTP. TCP. UDP等</li><li>跨端⽅向开发，有移动端H5. 微信⼩程序开发能⼒，拥有项⽬实操及从0到上线的完整经验</li><li>熟练数据可视化组件或工具。如 Echarts,FFCreator 可视化视频加工库</li><li>了解 nodeJS 及 koa. express 后端框架,能够进行简单的服务器开发与操作数据库</li></ul><h2 id="部分项目经历"><a href="#部分项目经历" class="headerlink" title="部分项目经历"></a>部分项目经历</h2><h5 id="2022-08-2023-02：星途项目后台管理系统-医生端小程序-顾客端小程序"><a href="#2022-08-2023-02：星途项目后台管理系统-医生端小程序-顾客端小程序" class="headerlink" title="2022/08~2023/02：星途项目后台管理系统/医生端小程序/顾客端小程序"></a>2022/08~2023/02：星途项目后台管理系统/医生端小程序/顾客端小程序</h5><p>所属公司：微位（深圳）网络科技有限公司</p><p><strong>项目描述：</strong></p><p>后台管理系统，主要包括运营数据展示，医生管理模块，医院管理模块，服务项目管理模块，订单管理模块，顾客管理模块，退款模块。</p><p><strong>技术栈：</strong></p><p>管理系统：vue3. vite. pinia. vue-router. scss. naiveui.  vue-quill-editor，unocss. echars</p><p><strong>技术要点：</strong></p><ol><li>通过配置husky为项目代码提交时添加代码规范检查与自动修复</li><li>封装文件上传组件，使用分片式上传方式实现文件断点续传，添加进度条效果，提高大文件上传稳定性</li><li>使用 echars 条形图. 折线图等图表进行每日的数据对比，便于运营人员进行数据分析</li><li>通过使用自定义数据 mock 方案，克服了项目开发前期的数据联调困难，极大得提高了开发效率</li></ol><p><strong>项目描述：</strong></p><p>医生端小程序，主要面对 B 端服务，主要功能：订单管理，顾客管理，病例填写，手写签名，可预约时间调整，服务项目管理，医院管理等；<br>顾客端小程序，主要面对 C 端用户，主要功能：模糊搜索，顾客订单创建，支付操作，退款操作，扫码签名等。</p><p><strong>技术栈：</strong></p><p>小程序：uni-app. vue2. scss. vuex. ts. uni-ui</p><p><strong>技术要点：</strong></p><ol><li>封装 tree 组件，新增查询列表功能，并采用虚拟列表渲染列表，优化树形权限架构</li><li>通过小程序分包压缩代码体积. 防抖节流等方法进行项目优化，增加骨架屏提高用户访问体验</li><li>封装开发富文本（mp-html）编辑器功能，并对其进行改造优化</li><li>部署 CI/CD，编写 GitLab gitlab-ciyml 文件，实现自动依赖安装，上传微信服务器体验版</li></ol><p><strong><em>其他项目：可信运营支撑系统</em></strong></p><h5 id="2021-08-2022-06：土巴兔装修-APP"><a href="#2021-08-2022-06：土巴兔装修-APP" class="headerlink" title="2021/08~2022/06：土巴兔装修 APP"></a>2021/08~2022/06：土巴兔装修 APP</h5><p>所属公司：深圳土巴兔集团股份有限公司</p><p><strong>项目描述：</strong></p><p>土巴兔装修 app 是公司主要输出装修设计方案渠道，公司的主要引流方式，引导用户进行访问，查看，下单。</p><p><strong>技术栈：</strong> JavaScript. tmpl(前端模板). jsBridge. less</p><p><strong>技术要点：</strong></p><ol><li>使用 better-scroll 优化页面滚动，使用fastclick插件解决click事件300ms延迟；</li><li>重构页面代码，解决历史遗留问题与技术痛点，升级技术栈</li><li>在错误监控方面，接入arms 更细致地追踪各项错误数据，对监控数据排查原因进行优化；</li><li>设置前端埋点，记录页面元素使用情况，方便产品运营进行深入分析</li></ol><h5 id="2021-09-2022-06：土巴兔家居装修小程序-百度-微信-支付宝"><a href="#2021-09-2022-06：土巴兔家居装修小程序-百度-微信-支付宝" class="headerlink" title="2021/09~2022/06：土巴兔家居装修小程序(百度/微信/支付宝)"></a>2021/09~2022/06：土巴兔家居装修小程序(百度/微信/支付宝)</h5><p>所属公司：深圳土巴兔集团股份有限公司</p><p><strong>项目描述：</strong></p><p>土巴兔家居装修小程序，主要为响应目前用户的使用习惯，便于用户搜索查看并与公司联系。该小程序投放平台包括：微信，百度，支付宝，抖音等</p><p><strong>技术栈：</strong> vue. uniapp. arms，ts，less 等</p><p><strong>技术要点：</strong></p><ol><li>通过接入 arms 对页面进行监控，并对高延迟页面进行开发</li><li>通过 web-view 引入外部页面，使之同时兼容 H5 与小程序，共用一套方案，减少开发成本</li><li>对会话框. 提示框等组件进行封装，在首页. 用户管理. 订单管理等多个页面进行复用，提高开发效率</li><li>实现小程序分享合并海报并进行数据监控</li></ol><h5 id="2019-10-2021-03：飞贷-app"><a href="#2019-10-2021-03：飞贷-app" class="headerlink" title="2019/10~2021/03：飞贷 app"></a>2019/10~2021/03：飞贷 app</h5><p>所属公司：深圳中兴飞贷金融科技有限公司</p><p><strong>项目描述：</strong></p><p>该项目是飞贷移动端 app 项目，完成注册之后，可线上操作额度申请. 信用贷款/抵押贷款. 设置还款计划. 全部还款/分期随还等整套小额贷款流程，完成申请仅需 4 步骤，最快 3 分钟即可。</p><p><strong>技术栈：</strong> Cordova. Vue. css3. Nginx 反向代理等</p><p><strong>技术要点：</strong></p><ol><li>将项⽬进⾏docker容器化部署，配置Nginx改造项⽬打包配置及设置环境变量运⾏时</li><li>使用 fexible.js 配合Post-css对不同屏幕进行适配</li><li>完成10+公共函数封装，提升了团队的开发效率，统⼀项⽬标准化使功能更契合业务</li><li>书写项目合同模板及优化，更新至服务器，允许用户点击下载</li></ol><h5 id="2019-10-2021-03：信用贷项目"><a href="#2019-10-2021-03：信用贷项目" class="headerlink" title="2019/10~2021/03：信用贷项目"></a>2019/10~2021/03：信用贷项目</h5><p>所属公司：深圳中兴飞贷金融科技有限公司</p><p><strong>项目描述：</strong></p><p>飞贷信用贷 H5 项目，以便用户管理及拓展更多的客户资源，在无需下载飞贷 APP 情况下，可通过链接多设备实现灵活信贷申请借款提现等操作，提现阶段用户可通过车主贷，公积金贷，发票贷等进行贷款操作，达到可贷款最大额度。</p><p><strong>技术栈：</strong> vue. vue-router.  vuex .  vux .  less . Nginx 反向代理</p><p><strong>技术要点：</strong></p><ol><li>对Axios请求进行二次封装，配置基础路径. 超时等全局设置，并在请求拦截器中统一为请求头添加token和响应拦截器中对错误进行统一处理</li><li>优化项目接口轮询方法，解决界面卡顿问题</li><li>基于产品功能需求对部分组件进行封装与二次改造，以便达到功能要求</li><li>实现自定义主体，允许用户对页面实现个性化配置，提升用户体验</li><li>配置 scp2 插件自动打包至服务器代码，减少手动更新至 nginx 过程及操作失误率。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 都欣-简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learn-socket.io</title>
      <link href="/2023/03/07/socket-io/"/>
      <url>/2023/03/07/socket-io/</url>
      
        <content type="html"><![CDATA[<h1 id="实现页面"><a href="#实现页面" class="headerlink" title="实现页面"></a>实现页面</h1><p><img src="/ts-type-challenges/img.png" alt="img"><br><img src="/ts-type-challenges/img_1.png" alt="socket-io/img_1"><br><img src="/ts-type-challenges/img_2.png" alt="socket-io/img_2"></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><pre><code>npm i express socket.io socket.io-client</code></pre><h3 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h3><p><strong>定义</strong>：Socket.io是一个WebSocket库，包括客户端的js和服务端的nodejs</p><p><strong>目标</strong>: 构建可以在不同浏览器和移动设备上使用的实际应用。它会自动根据浏览器从<code>WebSocket、AJAX长轮询、Iframe流</code>等各种方式中选择最佳的方式实现网络实施应用，非常方便与人性化</p><p><strong>特点</strong></p><ol><li>实时分析：将数据推送到客户端，这些客户端会被表示为实时计数器，图表或日志客户。</li><li>实时通信和聊天：只需几行代码便可写成一个Socket.IO的”Hello,World”聊天应用。</li><li>二进制流传输：从1.0版本开始，Socket.IO支持任何形式的二进制文件传输，例如：图片，视频，音频等。</li><li>文档合并：允许多个用户同时编辑一个文档，并且能够看到每个用户做出的修改。</li></ol><h3 id="io-onconnetion：客户端与服务端成功建立连接，接收一个回调函数：socket参数"><a href="#io-onconnetion：客户端与服务端成功建立连接，接收一个回调函数：socket参数" class="headerlink" title="io.onconnetion：客户端与服务端成功建立连接，接收一个回调函数：socket参数"></a>io.onconnetion：客户端与服务端成功建立连接，接收一个回调函数：socket参数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端与服务端成功建立连接'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="io-emit-用于向服务器发送消息，有两个参数"><a href="#io-emit-用于向服务器发送消息，有两个参数" class="headerlink" title="io.emit:用于向服务器发送消息，有两个参数"></a>io.emit:用于向服务器发送消息，有两个参数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 第一个参数：表示自定义的数据名</span>    <span class="token comment">// 第二个参数：需要配合事件传入的参数</span>    io<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'loading all clients'</span><span class="token punctuation">,</span> usersInfo<span class="token punctuation">)</span><span class="token comment">//加载所有客户端进来的用户</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回调函数中的socket"><a href="#回调函数中的socket" class="headerlink" title="回调函数中的socket"></a>回调函数中的<code>socket</code></h4><h5 id="socket-on方法：用于接收客户端发送来的消息"><a href="#socket-on方法：用于接收客户端发送来的消息" class="headerlink" title="socket.on方法：用于接收客户端发送来的消息"></a>socket.on方法：用于接收客户端发送来的消息</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 第一个参数：为客户端自定义的事件名</span>    <span class="token comment">// 第二个参数：回调函数callback,(data)=&gt;{},data为客户端传来的参数</span>    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'client data'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="socket-emit方法：表示对自己客户端发送消息。"><a href="#socket-emit方法：表示对自己客户端发送消息。" class="headerlink" title="socket.emit方法：表示对自己客户端发送消息。"></a>socket.emit方法：表示对自己客户端发送消息。</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'shake'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'您'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="socket-broadcast-emit-表示向除了自己以外的客户端发送消息。"><a href="#socket-broadcast-emit-表示向除了自己以外的客户端发送消息。" class="headerlink" title="socket.broadcast.emit(): 表示向除了自己以外的客户端发送消息。"></a>socket.broadcast.emit(): 表示向除了自己以外的客户端发送消息。</h5><pre><code>（比如：输入msg点击发送，只需要把msg通过服务器发送给其他客户端用于显示，而本地只需要将msg通过js代码添加到窗口，不用经过服务器了）</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 发出震动，并告诉震动的人</span>    socket<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'shake'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> socket<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="socket-ondisconnect-表示客户端和服务端断开连接"><a href="#socket-ondisconnect-表示客户端和服务端断开连接" class="headerlink" title="socket.ondisconnect: 表示客户端和服务端断开连接"></a>socket.ondisconnect: 表示客户端和服务端断开连接</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 第一个参数：为客户端自定义的事件名</span>    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'user disconnect'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>需要在index.html中引入<code>&lt;script src="/socket.io/socket.io.js"&gt;&lt;/script&gt;</code> 方可使用io(用的是socket.io-client)</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// io-client</span><span class="token comment">// 连接成功会触发服务器端的connection事件</span><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="socket-emit-EventName-param1-param2-…"><a href="#socket-emit-EventName-param1-param2-…" class="headerlink" title="socket.emit(EventName, param1, param2, …..)"></a>socket.emit(EventName, param1, param2, …..)</h3><p>定义： 用于客户端向服务端发送消息，服务端与之对应的是<code>socket.on</code>方法来接收消息</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'client msg'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    msg<span class="token operator">:</span> <span class="token string">'hello world'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="socket-on-‘’-cb"><a href="#socket-on-‘’-cb" class="headerlink" title="socket.on(‘’, cb)"></a>socket.on(‘’, cb)</h3><p>定义：用于接收服务端发来的消息</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'server msg'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span> <span class="token comment">// 接收到服务端的消息</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><ol><li>多人发消息</li><li>震动</li><li>发送表情</li><li>发送图片</li><li>列表切换</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> socket.io </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-2</title>
      <link href="/2022/12/07/vue-2/"/>
      <url>/2022/12/07/vue-2/</url>
      
        <content type="html"><![CDATA[<h3 id="核心地带"><a href="#核心地带" class="headerlink" title="核心地带"></a>核心地带</h3><p>在上一篇内容提到的<code>src/platforms/web/entry-runtime-with-compiler.js</code>文件中，存在Vue构造函数的引用</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aea9ae7d7f6d424881781be8b4afa6d0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>现在打开<code>src/platforms/web/runtime/index.js</code>可以看到该文件中，大部分都是对于Vue上属性的赋值定义<br>其中该文件中Vue的来源：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5dd9113af8a48319dc459d6f9c73dd9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h5 id="src-platforms-web-runtime-index-js"><a href="#src-platforms-web-runtime-index-js" class="headerlink" title="src/platforms/web/runtime/index.js"></a>src/platforms/web/runtime/index.js</h5><pre class="line-numbers language-none"><code class="language-none">extend(Vue.options.directives, platformDirectives) // platformDirectives: 全局指令model ,showextend(Vue.options.components, platformComponents) // platformComponents: 全局组件Transition，TransitionGroup// 但是不太清楚为啥仅仅吧model show 放在这里，后续看一下为啥？？？Vue.prototype.__patch__ = inBrowser ? patch : noopVue.prototype.$mount = function (...) {...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>src/core/index.js</code>在该文件中，正式进入到Vue的核心地带，Vue也是从此暴露出去的。【vue的定义是在<code>src/core/instance/index.js</code>】,</p><h3 id="core文件夹内容详谈"><a href="#core文件夹内容详谈" class="headerlink" title="core文件夹内容详谈"></a>core文件夹内容详谈</h3><h5 id="src-core-instance-index-js-中核心内容"><a href="#src-core-instance-index-js-中核心内容" class="headerlink" title="src/core/instance/index.js 中核心内容"></a>src/core/instance/index.js 中核心内容</h5><pre class="line-numbers language-none"><code class="language-none">function Vue (options) {  ....  this._init(options)}initMixin(Vue) // Vue.prototype._initstateMixin(Vue) // Vue.prototype.$set,Vue.prototype.$delete, Vue.prototype.$watch,eventsMixin(Vue) // Vue.prototype.$on,Vue.prototype.$once, Vue.prototype.$off, Vue.prototype.$emitlifecycleMixin(Vue) // Vue.prototype._update,Vue.prototype.$forceUpdate, Vue.prototype.$destroy, renderMixin(Vue) // Vue.prototype.$nextTick, Vue.prototype._renderexport default Vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="src-core-index-js核心代码"><a href="#src-core-index-js核心代码" class="headerlink" title="src/core/index.js核心代码"></a>src/core/index.js核心代码</h5><pre class="line-numbers language-none"><code class="language-none">import Vue from './instance/index'import { initGlobalAPI } from './global-api/index'...initGlobalAPI(Vue)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面探究一下：<code>initGlobalAPI</code> 这个方法中干了什么</p><ul><li>主要是增加了全局的组件，指令方法</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f85b52eab81d48ba980081927653cf6d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>写到这个地方，把上面的过程总结一下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f5a7a16e19d4f2788ab45c4fd3a451b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="Vue基本代码的执行在源码中的核心流程"><a href="#Vue基本代码的执行在源码中的核心流程" class="headerlink" title="Vue基本代码的执行在源码中的核心流程"></a>Vue基本代码的执行在源码中的核心流程</h1><p>像我们前端平常开发Vue项目，已经了解了大部分的Vue的一些技术点：数据双向绑定，监听器，计算属性，生命周期，mixin, 组件传值，模板语法等等</p><blockquote><p> 以前看过一位大佬的博客 对于源码的总结，很适合我这种初级手了解，现在我根据自己的理解先对代码运行时进行一个简单的小总。</p></blockquote><p><strong>【下图主要是created之前的一个过程】（画的过于潦草，见谅）</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38b38c84bac84d49887600d2a5e07410~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>在代码主要的部分还是init 数据、方法、计算属性，监听器的内容，而这部分出现在initState方法中，下面就继续讨论<code>initState</code>方法</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ed1ba6db82545038c5cb69934fa58e5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="new-Dep-：src-core-observer-dep-js"><a href="#new-Dep-：src-core-observer-dep-js" class="headerlink" title="new Dep()：src/core/observer/dep.js"></a>new Dep()：src/core/observer/dep.js</h4><blockquote><p>Dep非常重要，对于响应式，它与要实现响应式功能的数据对象和对象属性关联</p></blockquote><p>使用的实例化场景有两个地方：</p><ul><li> defineReactive(): url:  <code>src/core/observer/index.js（135行）</code></li><li> Observer 构造函数内：url: <code>src/core/observer/index.js(37行)</code></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebdd9b500650454d825d72f84ece1471~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>这样Observer对象与Dep对象一对一关联起来</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/addd1eae7e03452daa2c1695697d9e6d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>此处经过处理后的对象属性具有响应式功能，且每个属性通过必报中保存了一份Dep对象及其他必要信息，最后对象的属性也与Dep对象同样实现了一对一的关联</p></blockquote><p><strong><em>Dep源码</em></strong></p><pre class="line-numbers language-none"><code class="language-none">export default class Dep {  static target: ?Watcher; // 静态变量，保存watcher类型对象  id: number; // 对象的id  subs: Array&lt;Watcher&gt;; // 订阅者数组，元素即watcher对象  constructor () {    this.id = uid++    this.subs = []  }  addSub (sub: Watcher) { // 添加订阅者（对象的属性）    this.subs.push(sub)  }  removeSub (sub: Watcher) { // 删除订阅者    remove(this.subs, sub)  }  depend () {  // 依赖收集    if (Dep.target) {      Dep.target.addDep(this) // addDep（）是watcher构造函数中的方法，用于在subs添加内容    }  }  notify () { // 通知订阅者，更新事件      const subs = this.subs.slice()      ...      for(let i=0, l=subs.length;i&lt;l;i++) {          sub[i].update()      }  }}Dep.target = nullconst targetStack = []// watcher 对象export function pushTarget (target: ?Watcher) { // 入栈  debugger  targetStack.push(target)  Dep.target = target}export function popTarget () { // 出栈  debugger  targetStack.pop()  Dep.target = targetStack[targetStack.length - 1]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>掘金同步地址：<a href="https://juejin.cn/post/7174351333766463519">https://juejin.cn/post/7174351333766463519</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue-2.6.14 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-1</title>
      <link href="/2022/11/23/vue-1/"/>
      <url>/2022/11/23/vue-1/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作：下载源码"><a href="#准备工作：下载源码" class="headerlink" title="准备工作：下载源码"></a>准备工作：下载源码</h1><p>首先打开github上<a href="https://github.com/vuejs/vue">vue的源码</a>，现在使用2.6.x中最新的版本是：2.6.14（2.7.x版本是兼容vue3的特性，这次学习不升级考虑）</p><h3 id="三部曲"><a href="#三部曲" class="headerlink" title="三部曲"></a>三部曲</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1dd3f03262e24325844ac44ec1f7907e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>点击<code>code</code>,点击<code>Download ZIP</code>,点击 <code>解压缩</code>，通过<code>webstorm</code>打开项目</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>利用tree操作生成一个<a href="https://blog.csdn.net/weixin_40599951/article/details/127727594?spm=1001.2014.3001.5501">树结构</a>（本人记录的一个操作小记录），然后挑挑拣拣，如下：</p><pre><code>    D:.    ├─benchmarks                      性能基准测试    ├─dist                            打包输出目录    ├─examples                        测试案例    ├─flow                            flow语法的类型声明    ├─packages                        额外的包    ├─scripts                         配置文件目录    ├─src                             源码目录（重点）    │  ├─compiler                     编译器    │  │  ├─codegen                   吧AST转换成render    │  │  ├─directives                生成render函数钱处理的    │  │  └─parser                    解析编译    │  ├─core                         运行时的核心包    │  │  ├─components                内部封装的全局组件    │  │  ├─global-api                内部全局的API    │  │  ├─instance                  Vue实例相关的    │  │  ├─observer                  响应式原理    │  │  ├─util                      工具方法    │  │  └─vdom                      虚拟dom相关，著名的patch    │  ├─platforms                    平台相关的编译器代码    │  ├─server                       服务器渲染相关    │  ├─sfc                          转换成单文件处理    │  └─shared                       全局共享的工具常量    ├─test                            测试目录    └─types                           TS类型声明</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>打开<code>package.json</code>,可以看到<code>scripts</code>中dev，现在改动一下：[加了一个–sourcemap]</p><blockquote><p> sourcemap: 本质是一个信息文件，存储代码转换前后的对应位置关系，是源代码和生产代码的映射，在开发环境下可以使开发者更方便的调试。但是生产环境不需要配置，以免代码暴露泄露</p></blockquote> <pre class="line-numbers language-none"><code class="language-none">"dev": "rollup -w -c scripts/config.js --environment TARGET:web-full-dev --sourcemap",<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code> npm run dev //启动vue源码项目</code></pre><pre class="line-numbers language-none"><code class="language-none"> // 接下来可以在exanples新建一个最简单的测试文件：test/index.html&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;title&gt;vue-core-test1&lt;/title&gt;  &lt;script src="../../dist/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="app"&gt;  {{ message }}&lt;/div&gt;&lt;script&gt;  debugger  new Vue({    el: '#app',    data() {      return {        message: 'hello world'      }    }  })&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="寻找入口文件"><a href="#寻找入口文件" class="headerlink" title="寻找入口文件"></a>寻找入口文件</h3> <pre class="line-numbers language-none"><code class="language-none">"dev": "rollup -w -c scripts/config.js --environment TARGET:web-full-dev --sourcemap",<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从上面这句话可以分解出几个内容，现在分别解释一下：</p><ul><li>rollup -w -c : rollup是一个javascript模块打包器，-w:rollup的配置，启动监听模式，文件更新会自动打包；-c:指定rollup打包的配置文件</li><li>scripts/config.js : 打包的入口文件</li><li>–environment : 运行的、打包的环境，通过node中的process.env获取</li><li>TARGET:web-full-dev: 作为一个配置，在打包文件中用于参数查找<br><code>scripts/config.js</code><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//第三步</span><span class="token keyword">const</span> builds <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 定义一个对象</span>    <span class="token operator">...</span>    <span class="token string">'web-full-dev'</span><span class="token operator">:</span> <span class="token punctuation">{</span>      entry<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'web/entry-runtime-with-compiler.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      dest<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'dist/vue.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      format<span class="token operator">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span>      env<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>      alias<span class="token operator">:</span> <span class="token punctuation">{</span> he<span class="token operator">:</span> <span class="token string">'./entity-decoder'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      banner    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment">// 第二步</span><span class="token keyword">function</span> <span class="token function">genConfig</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> opts <span class="token operator">=</span> builds<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token comment">// 第一步</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARGET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">genConfig</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARGET</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  exports<span class="token punctuation">.</span>getBuild <span class="token operator">=</span> genConfig  exports<span class="token punctuation">.</span><span class="token function-variable function">getAllBuilds</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>builds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>genConfig<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动 npm run dev,rollup开始打包，进入<code>scripts/config.js</code>，进入第一步，判断TARGET存在，进入第二步，<code>genConfig('web-full-dev')</code>,找到第三步中的‘web-full-dev’，entry为入口文件</p></blockquote></li></ul><p><code>src/platforms/web/entry-runtime-with-compiler.js</code><br>可以看到该文件主要是对$mount的一个重新定义，添加了对模板的一些处理办法</p><ul><li>没有template,根据el中找</li><li>有template，直接用</li><li>…</li></ul><p>对应的就是我们vue2项目的<code>main.js</code>中：</p><pre class="line-numbers language-none"><code class="language-none">new Vue({ router, store, render: h =&gt; h(App)}).$mount('#app')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入口文件解析：entry-runtime-with-compiler-js"><a href="#入口文件解析：entry-runtime-with-compiler-js" class="headerlink" title="入口文件解析：entry-runtime-with-compiler.js"></a>入口文件解析：entry-runtime-with-compiler.js</h3><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;  const vm = new Vue({    el: '#app',    data() {      return {        message: 'hello world'      }    }  })  vm.$mount('#app')  console.log(vm.$options.render)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6de5ef4d57454baba40d91a89592149b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">// 作用：将VUe的html模板编译成render函数const mount = Vue.prototype.$mount // $mount 在Vue实例上Vue.prototype.$mount = function (  el?: string | Element, // 接收el 容器的id,一般就是‘#app’  hydrating?: boolean): Component {  el = el &amp;&amp; query(el)...// options: 实例提供的实参比如：{router,store,...}  const options = this.$options  if (!options.render) {    let template = options.template    if (template) {      if (typeof template === 'string') {        if (template.charAt(0) === '#') {          template = idToTemplate(template)        }      } else if (template.nodeType) {        template = template.innerHTML      } else {        return this      }    } else if (el) {      template = getOuterHTML(el) // 根据id找到outerHtml,也就是html模板    }    if (template) {        // 进入到此方法，编译html模板生成render        const { render, staticRenderFns } = compileToFunctions(template, {          outputSourceRange: process.env.NODE_ENV !== 'production',          shouldDecodeNewlines,          shouldDecodeNewlinesForHref,          delimiters: options.delimiters,          comments: options.comments        }, this)      options.render = render // 这样就可以通过vm.$options.render得到上图打印的结果      options.staticRenderFns = staticRenderFns    }  }  return mount.call(this, el, hydrating)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实例化Vue的时候提供了render,template，el,Vue的优先级是render &gt; template&gt; el</p></blockquote><p>在此过程中<code>compileToFunctions</code>这个函数是最重要的</p><ul><li>将html模板解析成AST</li><li>对AST优化</li><li>根据AST生成render函数</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>掘金同步地址：<a href="https://juejin.cn/post/7169053532341944334">https://juejin.cn/post/7169053532341944334</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue-2.6.14 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter-one</title>
      <link href="/2022/06/15/flutter-one/"/>
      <url>/2022/06/15/flutter-one/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="关于Hybrid"><a href="#关于Hybrid" class="headerlink" title="关于Hybrid"></a>关于Hybrid</h3><ol><li>H5 + 原生(JSBridge + webView)<blockquote><p>  这类框架主要原理就是将 App 中需要动态变动的内容通过HTML5（简称 H5）来实现，通过原生的网页加载控件WebView （Android）或 WKWebView（iOS）来加载（以后若无特殊说明，我们用WebView来统一指代 Android 和 iOS 中的网页加载控件）。这种方案中，H5 部分是可以随时改变而不用发版，动态化需求能满足；同时，由于 H5 代码只需要一次开发，就能同时在 Android 和 iOS 两个平台运行，这也可以减小开发成本，也就是说，H5 部分功能越多，开发成本就越小。我们称这种 H5 + 原生 的开发模式为混合开发 ，采用混合模式开发的App我们称之为混合应用或 HTMLybrid App ，如果一个应用的大多数功能都是 H5 实现的话，我们称其为 Web App 。</p></blockquote></li></ol><p>Web App问题：性能瓶颈导致用户体验不佳，复杂功能难以实现</p><hr><ol start="2"><li>JS + 原生UI（React Native【facebook基于react容器】\weex【阿里基于vux容器】）<blockquote><p>核心技术点：把Dom映射在原生的控制树，框架会把dom树自动转化为不同平台的控件树，其最终还是调用原生的API来绘制。</p></blockquote></li></ol><ul><li>混合开发的优点<ul><li>社区庞大，开发成本低</li><li>使用前端技术框架，原生渲染，性能尚可</li><li>支持热更新</li></ul></li><li>混合开发的缺点<ul><li>与原生通信，难以胜复杂的绘制和动画工作</li><li>js为脚本语言，解释执行，性能和原生开发编译后运行，有一定差距</li><li>调用系统用硬件功能非常麻烦</li></ul></li></ul><ol start="3"><li>自绘引擎<blockquote><p>不依赖操作系统提供的布局、原生组件能力，直接调用GPU或底层抽象层进行控制的渲染引擎</p></blockquote></li></ol><ul><li>QtMobile<br>  基于c++,最佳表现不佳</li><li>Flutter<br>  通过Dart语言构建一套跨平台的开发组件。是Google推出并开源的移动应用开发框架，主打跨平台，高保真，高性能。一套代码运行在ios和安卓。<br><img src="/image.png" alt="Alt text"></li></ul><h2 id="初始flutter"><a href="#初始flutter" class="headerlink" title="初始flutter"></a>初始flutter</h2><blockquote><p>Flutter 是 Google 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter 提供了丰富的组件、接口，开发者可以很快地为 Flutter 添加 Native（即原生开发，指基于平台原生语言来开发应用，flutter可以和平台原生语言混合开发） 扩展。</p></blockquote><p><strong>特点：</strong></p><ol><li>跨平台自绘引擎skia</li><li>高性能: AOT(提前编译)；JIT(即时编译)</li><li>Dart开发<ul><li>开发效率高</li><li>高性能</li><li>快速内存分配</li><li>类型安全和空安全</li></ul></li></ol><p><strong>框架结构：</strong></p><ul><li><p>框架层Framework</p><ol><li>底下两层</li><li>Rendering 层，即渲染层，</li><li>Widgets 层是 Flutter 提供的的一套基础组件库，在基础组件库之上，Flutter 还提供了 Material 和 Cupertino 两种视觉风格的组件库，它们分别实现了 Material 和 iOS 设计规范。</li></ol></li><li><p>引擎层Engine<br>Engine，即引擎层。毫无疑问是 Flutter 的核心， 该层主要是 C++ 实现，其中包括了 Skia 引擎、Dart 运行时（Dart runtime）、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到引擎层，然后实现真正的绘制和显示。</p></li><li><p>嵌入层<br>Embedder，即嵌入层。Flutter 最终渲染、交互是要依赖其所在平台的操作系统 API，嵌入层主要是将 Flutter 引擎 ”安装“ 到特定平台上。嵌入层采用了当前平台的语言编写，例如 Android 使用的是 Java 和 C++， iOS 和 macOS 使用的是 Objective-C 和 Objective-C++，Windows 和 Linux 使用的是 C++。 Flutter 代码可以通过嵌入层，以模块方式集成到现有的应用中，也可以作为应用的主体。Flutter 本身包含了各个常见平台的嵌入层，假如以后 Flutter 要支持新的平台，则需要针对该新的平台编写一个嵌入层。<br><img src="/image-1.png" alt="Alt text"></p></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h2 id="Dart-语言"><a href="#Dart-语言" class="headerlink" title="Dart 语言"></a>Dart 语言</h2><p>强类型语言</p><ol><li><p>变量声明</p><ol><li><p>var关键字<br> 一旦定义就确定类型</p></li><li><p>dynamic 和 Object<br> Object时Dart的所有对象的根基类。所以任何类型的数据都可以赋值给Object声明的对象<br> dynamic 和 Object都可以赋值任意对象，且可改变</p><ol><li>dynamic声明的对象编译器会提供所有可能的组合,当变量没有某个属性时，编译时不会报错，但是运行时是会报错的</li><li>Object声明的对象只能使用 Object 的属性与方法, 否则编译器会报错</li></ol></li><li><p>final 和const<br> 如果您从未打算更改一个变量，那么使用 final 或 const，不是var，也不是一个类型。 一个 final 变量只能被设置一次，两者区别在于：</p><ol><li>const 变量是一个编译时常量（编译时直接替换为常量值）</li><li>final变量在第一次使用时被初始化。<br>被final或者const修饰的变量，变量类型可以省略，<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">//可以省略String这个类型声明</span><span class="token keyword">final</span> str <span class="token operator">=</span> <span class="token string">"hi world"</span><span class="token punctuation">;</span><span class="token comment">//final String str = "hi world"; </span><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">"hi world"</span><span class="token punctuation">;</span><span class="token comment">//const String str1 = "hi world";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>空安全（null-safety）<br> Dart 中一切都是对象，这意味着如果我们定义一个数字，在初始化它之前如果我们使用了它，假如没有某种检查机制，则不会报错，现在我们引入了空安全，执行不会报错，但是会触发一个运行时的错误</p> <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">int i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">//默认为不可空，必须在定义时初始化。</span>int<span class="token operator">?</span> j<span class="token punctuation">;</span> <span class="token comment">// 定义为可空类型，对于可空变量，我们在使用前必须判空。</span><span class="token comment">// 如果我们预期变量不能为空，但在定义时不能确定其初始值，则可以加上late关键字，</span><span class="token comment">// 表示会稍后初始化，但是在正式使用它之前必须得保证初始化过了，否则会报错</span>late int k<span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 如果一个变量我们定义为可空类型，在某些情况下即使我们给它赋值过了，但是预处理器仍然有可能识别不出，这时我们就要显式（通过在变量后面加一个”!“符号）告诉预处理器它已经不是null了</p> <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    int<span class="token operator">?</span> i<span class="token punctuation">;</span>    <span class="token keyword">Function</span><span class="token operator">?</span> fun<span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">!</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为已经判过空，所以能走到这 i 必不为null，如果没有显式申明，则 IDE 会报错</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fun<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fun<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同上</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>4.1 函数<br>  Dart是一种真正的面向对象的语言，所以即使是函数也是对象，并且有一个类型Function。这意味着函数可以赋值给变量或作为参数传递给其他函数，这是函数式编程的典型特征。[函数返回值没有类型推断]</p><ul><li><p>函数声明</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>函数作为变量</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> say <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"hi world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数作为参数传递</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">//定义函数execute，它的参数类型为函数</span><span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">var</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行传入的函数</span><span class="token punctuation">}</span><span class="token comment">//调用execute，将箭头函数作为参数传递</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>可选的参数位置</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> <span class="token punctuation">[</span>String<span class="token operator">?</span> device<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果是： Bob says Howdy</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">,</span> <span class="token string">'smoke signal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果是：Bob says Howdy with a smoke signal</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可选的命名参数</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">//设置[bold]和[hidden]标志</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ... </span><span class="token punctuation">}</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>  <strong>注意，不能同时使用可选的位置参数和可选的命名参数</strong></p><ul><li><p>mixin<br>  Dart 是不支持多继承的，但是它支持 mixin，简单来讲 mixin 可以 “组合” 多个类，我们通过一个例子来理解。</p>  <pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">mixin</span> Eat <span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">mixin</span> Walk <span class="token punctuation">{</span>    <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'walk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">mixin</span> Code <span class="token punctuation">{</span>    <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">with</span> Eat<span class="token punctuation">,</span> Walk<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">with</span> Eat<span class="token punctuation">,</span> Walk<span class="token punctuation">,</span> Code<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>异步支持<br>  Dart类库有非常多的返回Future或者Stream对象的函数。 这些函数被称为异步函数：它们只会在设置好一些耗时操作之后返回，比如像 IO操作。而不是等到这个操作完成。</p><ul><li><ol><li>Future<br>和js中的promise相似，表示一个异步操作的最终完成或失败及其结果值的表示。就是用来处理异步操作的。一个Future只会对应一个结果，要么成功，要么失败<br>Future的所有apI的返回值仍旧是一个Future对象，所以很方便进行链式调用</li></ol><ul><li>1.1 Future.then(=== promise.then)</li><li>1.2 Future.catchError(=== promise.catch)</li><li>1.3 Future.whenComplete (===promise.finally)</li><li>1.4 Future.wait (===promise.all)<br>  它接受一个Future数组参数，只有数组中所有Future都执行成功后，才会触发then的成功回调，只要有一个Future执行失败，就会触发错误回调。</li></ul></li><li><ol start="2"><li>async/await(=== js的async/await)<br>解决回调地狱<pre><code class="dart">task() async {   try{       String id = await login("alice","******");       String userInfo = await getUserInfo(id);       await saveUserInfo(userInfo);       //执行接下来的操作      } catch(e){       //错误处理          print(e);      }  }</code></pre></li></ol></li></ul></li><li><p>Stream<br>Stream 也是用于接收异步事件数据，和 Future 不同的是，它可以接收多个异步操作的结果（成功或失败）。 也就是说，在执行异步任务时，可以通过多次触发成功或失败事件来传递结果数据或错误异常。 Stream 常用于会多次读取数据的异步任务场景，如网络内容下载、文件读写等</p></li></ul></li></ul></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5Compatibility</title>
      <link href="/2022/04/17/h5compatibility/"/>
      <url>/2022/04/17/h5compatibility/</url>
      
        <content type="html"><![CDATA[<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li> 禁止复制文本：user-select:none</li><li>长时间按住页面出现闪退：element{-webkit-touch-callout:none}</li><li>旋转屏幕，字体调整的问题：标签选择器{-webkit-text-size-ajust:100%}</li><li>tab吸顶的操作，用sticky,部分手机失效，还是要使用切换样式的方式</li><li>修改placeholder的样式的时候，直接修改颜色无效: 必须要加上opacity: 1<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input::-webkit-input-placeholder</span> <span class="token punctuation">{</span> <span class="token comment">/* WebKit, Blink, Edge */</span>   <span class="token property">color</span><span class="token punctuation">:</span>#f6a38d<span class="token punctuation">;</span>   <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input:-moz-placeholder</span> <span class="token punctuation">{</span> <span class="token comment">/* Mozilla Firefox 4 to 18 */</span>   <span class="token property">color</span><span class="token punctuation">:</span>#f6a38d<span class="token punctuation">;</span>   <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input::-moz-placeholder</span> <span class="token punctuation">{</span> <span class="token comment">/* Mozilla Firefox 19+ */</span>   <span class="token property">color</span><span class="token punctuation">:</span>#f6a38d<span class="token punctuation">;</span>   <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input:-ms-input-placeholder</span> <span class="token punctuation">{</span> <span class="token comment">/* Internet Explorer 10-11 */</span>   <span class="token property">color</span><span class="token punctuation">:</span>#f6a38d<span class="token punctuation">;</span>   <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="babel-css"><a href="#babel-css" class="headerlink" title="babel + css"></a>babel + css</h2><h3 id="babel对ecmascript的支持"><a href="#babel对ecmascript的支持" class="headerlink" title="babel对ecmascript的支持"></a>babel对ecmascript的支持</h3><p><strong>babel将es6、es7、es8等语法转换成浏览器可识别的es5或es3语法。</strong><br>babel总共分为三个阶段：解析，转换，生成<br>（babel从6.0开始，不进行transform,这个过程交给plugin做，所以要配置多个plugin，如果没有配置则经过babel输出的代码是没有改变的。为了解决这个问题，babel提供了预设插件：preset[预设置一组插件来便捷使用这些插件所提供的功能—@babel/preset-env]）</p><ul><li>corejs才是api兼容实现的提供者</li><li>@babel/preset-env: 主要是用来转换已经被正式纳入TC39的语法，还有个作用：对api处理，在代码里引入polyfill。根据浏览器兼容性做针对性的语法转换</li><li>@babel/polyfill是一个运行时包，主要是通过核心依赖core-js@2来完成对应浏览器不支持的新的全局和实例api的添加。</li><li>@babel/runtime：核心思想是以引入替换的方式来解决兼容性问题。是api模拟方案的提供者，是项目生产依赖，而不是开发依赖，安装的时候不要使用-D</li><li>@babel/plugin-transform-runtime就是为了方便@babel/runtime的使用<h4 id="两种方案"><a href="#两种方案" class="headerlink" title="两种方案"></a>两种方案</h4></li></ul><ol><li>polyfill<br>a. @babel/preset-env + corejs@3实现语法转换 + 在全局和实例上添加api，支持全量加载和按需加载<br>b. 缺点：造成全局污染，且会注入冗余的工具代码<br>c. 优点：根据浏览器对新特性的支持度选择性的进行兼容性处理</li><li>runtime<br>a. @babel/preset-env + @babel/runtime-corejs3 + @babel/plugin-transform-runtime实现语法转换 + 模拟替换api，只支持按需加载<br>b. 缺点：虽然解决了polyfill的缺点，但是会造成一些不必要的转换，从而增加代码体积</li></ol><h3 id="autoprefixer的样式支持"><a href="#autoprefixer的样式支持" class="headerlink" title="autoprefixer的样式支持"></a>autoprefixer的样式支持</h3><p>   css3样式前缀自动补全工具</p><h2 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h2><ol><li>滚动条，ios在手动滚动的时候，滚动条会出现，随后消失，安卓没有这个问题。</li></ol><p>  <strong>解决：</strong>【加个样式】::-webkit-scrollbar {display: none;}</p><ol start="2"><li><p>事件委托：点击事件放在body上或者document委托事件上，点击事件会不生效（场景：全屏弹窗，点击关闭无法关闭）<br><strong>解决：</strong> 委托事件放在非html,body的父级元素了【加了一个全局div】<br>事件添加到可以点击的标签上</p></li><li><p>iphone及ipad下输入框默认有内阴影<br><strong>解决：</strong> element{-webkit-appearance:none}</p></li><li><p>ios输入单词首字母总是会大写<br><strong>解决：</strong><code>&lt;input autocapitalize="off" autocorrect="off" /&gt;</code></p></li><li><p>ios滚动条有时候会卡顿<br><strong>解决：</strong>-webkit-overflow-scrolling: touch（增加弹性）</p></li><li><p>ios识别长串数字为电话<br><strong>解决：</strong><meta content="telephone=no" name="format-detection"></p></li><li><p>禁止ios弹出各种窗口/长时间按住页面出现闪退<br><strong>解决：</strong>-webkit-touch-callout: none</p></li><li><p>ios缓存问题，从首页点击进入详情页，当通过历史记录返回首页时，整个页面会缓存<br><strong>解决：</strong> 给请求加个时间戳或者重新跳转首页</p></li><li><p>ios下 使用disabled 文字颜色会变得不清晰<br><strong>解决：</strong> input#Stime:disabled { </p><pre><code>          -webkit-text-fill-color: #;          -webkit-opacity: ;          color: #;       }</code></pre></li></ol><h2 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h2><ol><li><p>拨打电话样式不同，ios是出现去拨打电话，安卓是直接跳转到拨号界面<br><strong>解决：</strong> 跳转前，统一加一个弹窗 点击去拨打再去拨打电话</p></li><li><p>部分型号的安卓手机圆角会失效<br><strong>解决：</strong> background-clip:padding-box</p></li><li><p>安卓型号太多，有些的手机的分辨率太小，导致有些设备显示图片不清晰<br><strong>解决：</strong> 全部采用图片2倍图显示且background-size: contain</p></li><li><p>安卓手机下取消语音的输入按钮<br><strong>解决：</strong> input::-webkit-input-speech-button {display: none}</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> H5兼容性 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
